.\tests\third_party\03.drac
label: <id> content: is_palindrome
label: ( content: (
label: <id> content: str
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: start
label: , content: ,
label: <id> content: finish
label: ; content: ;
label: <id> content: start
label: = content: =
label: <lit-int> content: 0
label: ; content: ;
label: <id> content: finish
label: = content: =
label: <id> content: size
label: ( content: (
label: <id> content: str
label: ) content: )
label: - content: -
label: <lit-int> content: 1
label: ; content: ;
label: while content: while
label: ( content: (
label: <id> content: start
label: < content: <
label: <id> content: finish
label: ) content: )
label: { content: {
label: if content: if
label: ( content: (
label: <id> content: get
label: ( content: (
label: <id> content: str
label: , content: ,
label: <id> content: start
label: ) content: )
label: <> content: <>
label: <id> content: get
label: ( content: (
label: <id> content: str
label: , content: ,
label: <id> content: finish
label: ) content: )
label: ) content: )
label: { content: {
label: return content: return
label: <lit-bool> content: false
label: ; content: ;
label: } content: }
label: inc content: inc
label: <id> content: start
label: ; content: ;
label: dec content: dec
label: <id> content: finish
label: ; content: ;
label: } content: }
label: return content: return
label: <lit-bool> content: true
label: ; content: ;
label: } content: }
label: <id> content: main
label: ( content: (
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: str
label: , content: ,
label: <id> content: option
label: ; content: ;
label: do content: do
label: { content: {
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Input a string: "
label: ) content: )
label: ; content: ;
label: <id> content: str
label: = content: =
label: <id> content: reads
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "The string \""
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <id> content: str
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "\" is "
label: ) content: )
label: ; content: ;
label: if content: if
label: ( content: (
label: not content: not
label: <id> content: is_palindrome
label: ( content: (
label: <id> content: str
label: ) content: )
label: ) content: )
label: { content: {
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "NOT "
label: ) content: )
label: ; content: ;
label: } content: }
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "a palindrome.\n"
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Check another string? "
label: ) content: )
label: ; content: ;
label: <id> content: option
label: = content: =
label: <id> content: reads
label: ( content: (
label: ) content: )
label: ; content: ;
label: if content: if
label: ( content: (
label: <id> content: size
label: ( content: (
label: <id> content: option
label: ) content: )
label: == content: ==
label: <lit-int> content: 0
label: ) content: )
label: { content: {
label: <id> content: option
label: = content: =
label: <lit-char> content: 'N'
label: ; content: ;
label: } content: }
label: else content: else
label: { content: {
label: <id> content: option
label: = content: =
label: <id> content: get
label: ( content: (
label: <id> content: option
label: , content: ,
label: <lit-int> content: 0
label: ) content: )
label: ; content: ;
label: } content: }
label: } content: }
label: while content: while
label: ( content: (
label: <id> content: option
label: == content: ==
label: <lit-char> content: 'Y'
label: or content: or
label: <id> content: option
label: == content: ==
label: <lit-char> content: 'y'
label: ) content: )
label: ; content: ;
label: } content: }
