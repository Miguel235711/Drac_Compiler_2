.\tests\third_party\02.drac
label: <id> content: reverse
label: ( content: (
label: <id> content: array
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: start
label: , content: ,
label: <id> content: finish
label: , content: ,
label: <id> content: temp
label: ; content: ;
label: <id> content: start
label: = content: =
label: <lit-int> content: 0
label: ; content: ;
label: <id> content: finish
label: = content: =
label: <id> content: size
label: ( content: (
label: <id> content: array
label: ) content: )
label: - content: -
label: <lit-int> content: 1
label: ; content: ;
label: while content: while
label: ( content: (
label: <id> content: start
label: < content: <
label: <id> content: finish
label: ) content: )
label: { content: {
label: <id> content: temp
label: = content: =
label: <id> content: get
label: ( content: (
label: <id> content: array
label: , content: ,
label: <id> content: start
label: ) content: )
label: ; content: ;
label: <id> content: set
label: ( content: (
label: <id> content: array
label: , content: ,
label: <id> content: start
label: , content: ,
label: <id> content: get
label: ( content: (
label: <id> content: array
label: , content: ,
label: <id> content: finish
label: ) content: )
label: ) content: )
label: ; content: ;
label: <id> content: set
label: ( content: (
label: <id> content: array
label: , content: ,
label: <id> content: finish
label: , content: ,
label: <id> content: temp
label: ) content: )
label: ; content: ;
label: inc content: inc
label: <id> content: start
label: ; content: ;
label: dec content: dec
label: <id> content: finish
label: ; content: ;
label: } content: }
label: } content: }
label: <id> content: binary
label: ( content: (
label: <id> content: num
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: result
label: , content: ,
label: <id> content: remainder
label: ; content: ;
label: if content: if
label: ( content: (
label: <id> content: num
label: <= content: <=
label: <lit-int> content: 0
label: ) content: )
label: { content: {
label: return content: return
label: <lit-str> content: "0"
label: ; content: ;
label: } content: }
label: <id> content: result
label: = content: =
label: <lit-str> content: ""
label: ; content: ;
label: while content: while
label: ( content: (
label: <id> content: num
label: > content: >
label: <lit-int> content: 0
label: ) content: )
label: { content: {
label: <id> content: remainder
label: = content: =
label: <id> content: num
label: % content: %
label: <lit-int> content: 2
label: ; content: ;
label: <id> content: add
label: ( content: (
label: <id> content: result
label: , content: ,
label: <id> content: remainder
label: + content: +
label: <lit-char> content: '0'
label: ) content: )
label: ; content: ;
label: <id> content: num
label: = content: =
label: <id> content: num
label: / content: /
label: <lit-int> content: 2
label: ; content: ;
label: } content: }
label: <id> content: reverse
label: ( content: (
label: <id> content: result
label: ) content: )
label: ; content: ;
label: return content: return
label: <id> content: result
label: ; content: ;
label: } content: }
label: <id> content: main
label: ( content: (
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: option
label: , content: ,
label: <id> content: num
label: ; content: ;
label: do content: do
label: { content: {
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Input a number: "
label: ) content: )
label: ; content: ;
label: <id> content: num
label: = content: =
label: <id> content: readi
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Conversion to binary of that number: "
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <id> content: binary
label: ( content: (
label: <id> content: num
label: ) content: )
label: ) content: )
label: ; content: ;
label: <id> content: println
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Convert another number? "
label: ) content: )
label: ; content: ;
label: <id> content: option
label: = content: =
label: <id> content: reads
label: ( content: (
label: ) content: )
label: ; content: ;
label: if content: if
label: ( content: (
label: <id> content: size
label: ( content: (
label: <id> content: option
label: ) content: )
label: == content: ==
label: <lit-int> content: 0
label: ) content: )
label: { content: {
label: <id> content: option
label: = content: =
label: <lit-char> content: 'N'
label: ; content: ;
label: } content: }
label: else content: else
label: { content: {
label: <id> content: option
label: = content: =
label: <id> content: get
label: ( content: (
label: <id> content: option
label: , content: ,
label: <lit-int> content: 0
label: ) content: )
label: ; content: ;
label: } content: }
label: } content: }
label: while content: while
label: ( content: (
label: <id> content: option
label: == content: ==
label: <lit-char> content: 'Y'
label: or content: or
label: <id> content: option
label: == content: ==
label: <lit-char> content: 'y'
label: ) content: )
label: ; content: ;
label: } content: }
