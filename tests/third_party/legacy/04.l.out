.\tests\third_party\04.drac
label: <id> content: iterative_factorial
label: ( content: (
label: <id> content: n
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: result
label: , content: ,
label: <id> content: i
label: ; content: ;
label: <id> content: result
label: = content: =
label: <lit-int> content: 1
label: ; content: ;
label: <id> content: i
label: = content: =
label: <lit-int> content: 2
label: ; content: ;
label: while content: while
label: ( content: (
label: <id> content: i
label: <= content: <=
label: <id> content: n
label: ) content: )
label: { content: {
label: <id> content: result
label: = content: =
label: <id> content: result
label: * content: *
label: <id> content: i
label: ; content: ;
label: inc content: inc
label: <id> content: i
label: ; content: ;
label: } content: }
label: return content: return
label: <id> content: result
label: ; content: ;
label: } content: }
label: <id> content: recursive_factorial
label: ( content: (
label: <id> content: n
label: ) content: )
label: { content: {
label: if content: if
label: ( content: (
label: <id> content: n
label: <= content: <=
label: <lit-int> content: 0
label: ) content: )
label: { content: {
label: return content: return
label: <lit-int> content: 1
label: ; content: ;
label: } content: }
label: else content: else
label: { content: {
label: return content: return
label: <id> content: n
label: * content: *
label: <id> content: recursive_factorial
label: ( content: (
label: <id> content: n
label: - content: -
label: <lit-int> content: 1
label: ) content: )
label: ; content: ;
label: } content: }
label: } content: }
label: <id> content: main
label: ( content: (
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: num
label: , content: ,
label: <id> content: option
label: ; content: ;
label: do content: do
label: { content: {
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Input a number: "
label: ) content: )
label: ; content: ;
label: <id> content: num
label: = content: =
label: <id> content: readi
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Iterative factorial: "
label: ) content: )
label: ; content: ;
label: <id> content: printi
label: ( content: (
label: <id> content: iterative_factorial
label: ( content: (
label: <id> content: num
label: ) content: )
label: ) content: )
label: ; content: ;
label: <id> content: println
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Recursive factorial: "
label: ) content: )
label: ; content: ;
label: <id> content: printi
label: ( content: (
label: <id> content: recursive_factorial
label: ( content: (
label: <id> content: num
label: ) content: )
label: ) content: )
label: ; content: ;
label: <id> content: println
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Compute another factorial? "
label: ) content: )
label: ; content: ;
label: <id> content: option
label: = content: =
label: <id> content: reads
label: ( content: (
label: ) content: )
label: ; content: ;
label: if content: if
label: ( content: (
label: <id> content: size
label: ( content: (
label: <id> content: option
label: ) content: )
label: == content: ==
label: <lit-int> content: 0
label: ) content: )
label: { content: {
label: <id> content: option
label: = content: =
label: <lit-char> content: 'N'
label: ; content: ;
label: } content: }
label: else content: else
label: { content: {
label: <id> content: option
label: = content: =
label: <id> content: get
label: ( content: (
label: <id> content: option
label: , content: ,
label: <lit-int> content: 0
label: ) content: )
label: ; content: ;
label: } content: }
label: } content: }
label: while content: while
label: ( content: (
label: <id> content: option
label: == content: ==
label: <lit-char> content: 'Y'
label: or content: or
label: <id> content: option
label: == content: ==
label: <lit-char> content: 'y'
label: ) content: )
label: ; content: ;
label: } content: }
