.\tests\third_party\07.drac
label: var content: var
label: <id> content: fails
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <id> content: value1
label: , content: ,
label: <id> content: value2
label: , content: ,
label: <id> content: message
label: ) content: )
label: { content: {
label: if content: if
label: ( content: (
label: <id> content: value1
label: <> content: <>
label: <id> content: value2
label: ) content: )
label: { content: {
label: inc content: inc
label: <id> content: fails
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: "Assertion failure: "
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <id> content: message
label: ) content: )
label: ; content: ;
label: <id> content: println
label: ( content: (
label: ) content: )
label: ; content: ;
label: } content: }
label: } content: }
label: <id> content: main
label: ( content: (
label: ) content: )
label: { content: {
label: var content: var
label: <id> content: s
label: , content: ,
label: <id> content: a
label: , content: ,
label: <id> content: i
label: , content: ,
label: <id> content: n
label: ; content: ;
label: <id> content: fails
label: = content: =
label: <lit-int> content: 0
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\n'
label: , content: ,
label: <lit-int> content: 10
label: , content: ,
label: <lit-str> content: "error in newline literal"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\r'
label: , content: ,
label: <lit-int> content: 13
label: , content: ,
label: <lit-str> content: "error in carriage return literal"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\t'
label: , content: ,
label: <lit-int> content: 9
label: , content: ,
label: <lit-str> content: "error in tab literal"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\\'
label: , content: ,
label: <lit-int> content: 92
label: , content: ,
label: <lit-str> content: "error in backslash literal"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\''
label: , content: ,
label: <lit-int> content: 39
label: , content: ,
label: <lit-str> content: "error in single quote literal"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\"'
label: , content: ,
label: <lit-int> content: 34
label: , content: ,
label: <lit-str> content: "error in double quote literal"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\u000041'
label: , content: ,
label: <lit-char> content: 'A'
label: , content: ,
label: <lit-str> content: "error in letter A literal code point"
label: ) content: )
label: ; content: ;
label: <id> content: assert
label: ( content: (
label: <lit-char> content: '\u0020AC'
label: , content: ,
label: <lit-int> content: 8364
label: , content: ,
label: <lit-str> content: "error in euro literal code point"
label: ) content: )
label: ; content: ;
label: <id> content: s
label: = content: =
label: <lit-str> content: "\u0000A1\u0020ACste ni\u0000F1o \u0020ACst\u0000E1 bien \u0000D1o\u0000F1o!\n"
label: ; content: ;
label: <id> content: a
label: = content: =
label: [ content: [
label: <lit-int> content: 161
label: , content: ,
label: <lit-int> content: 8364
label: , content: ,
label: <lit-int> content: 115
label: , content: ,
label: <lit-int> content: 116
label: , content: ,
label: <lit-int> content: 101
label: , content: ,
label: <lit-int> content: 32
label: , content: ,
label: <lit-int> content: 110
label: , content: ,
label: <lit-int> content: 105
label: , content: ,
label: <lit-int> content: 241
label: , content: ,
label: <lit-int> content: 111
label: , content: ,
label: <lit-int> content: 32
label: , content: ,
label: <lit-int> content: 8364
label: , content: ,
label: <lit-int> content: 115
label: , content: ,
label: <lit-int> content: 116
label: , content: ,
label: <lit-int> content: 225
label: , content: ,
label: <lit-int> content: 32
label: , content: ,
label: <lit-int> content: 98
label: , content: ,
label: <lit-int> content: 105
label: , content: ,
label: <lit-int> content: 101
label: , content: ,
label: <lit-int> content: 110
label: , content: ,
label: <lit-int> content: 32
label: , content: ,
label: <lit-int> content: 209
label: , content: ,
label: <lit-int> content: 111
label: , content: ,
label: <lit-int> content: 241
label: , content: ,
label: <lit-int> content: 111
label: , content: ,
label: <lit-int> content: 33
label: , content: ,
label: <lit-int> content: 10
label: ] content: ]
label: ; content: ;
label: <id> content: i
label: = content: =
label: <lit-int> content: 0
label: ; content: ;
label: <id> content: n
label: = content: =
label: <id> content: size
label: ( content: (
label: <id> content: s
label: ) content: )
label: ; content: ;
label: while content: while
label: ( content: (
label: <id> content: i
label: < content: <
label: <id> content: n
label: ) content: )
label: { content: {
label: <id> content: assert
label: ( content: (
label: <id> content: get
label: ( content: (
label: <id> content: a
label: , content: ,
label: <id> content: i
label: ) content: )
label: , content: ,
label: <id> content: get
label: ( content: (
label: <id> content: s
label: , content: ,
label: <id> content: i
label: ) content: )
label: , content: ,
label: <lit-str> content: "error in string literal"
label: ) content: )
label: ; content: ;
label: inc content: inc
label: <id> content: i
label: ; content: ;
label: } content: }
label: <id> content: printi
label: ( content: (
label: <id> content: fails
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <lit-str> content: " assertion failure(s) found."
label: ) content: )
label: ; content: ;
label: <id> content: println
label: ( content: (
label: ) content: )
label: ; content: ;
label: <id> content: prints
label: ( content: (
label: <id> content: a
label: ) content: )
label: ; content: ;
label: } content: }
